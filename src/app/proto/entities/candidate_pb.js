// source: entities/candidate.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var entities_common_pb = require('../entities/common_pb.js');
goog.object.extend(proto, entities_common_pb);
var entities_user_pb = require('../entities/user_pb.js');
goog.object.extend(proto, entities_user_pb);
goog.exportSymbol('proto.candidate.Candidate', null, global);
goog.exportSymbol('proto.candidate.CandidateDetail', null, global);
goog.exportSymbol('proto.candidate.CandidateId', null, global);
goog.exportSymbol('proto.candidate.Experience', null, global);
goog.exportSymbol('proto.candidate.Notes', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.candidate.Candidate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.candidate.Candidate.repeatedFields_, null);
};
goog.inherits(proto.candidate.Candidate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.candidate.Candidate.displayName = 'proto.candidate.Candidate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.candidate.CandidateDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.candidate.CandidateDetail.repeatedFields_, null);
};
goog.inherits(proto.candidate.CandidateDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.candidate.CandidateDetail.displayName = 'proto.candidate.CandidateDetail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.candidate.Notes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.candidate.Notes.repeatedFields_, null);
};
goog.inherits(proto.candidate.Notes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.candidate.Notes.displayName = 'proto.candidate.Notes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.candidate.Experience = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.candidate.Experience, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.candidate.Experience.displayName = 'proto.candidate.Experience';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.candidate.CandidateId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.candidate.CandidateId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.candidate.CandidateId.displayName = 'proto.candidate.CandidateId';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.candidate.Candidate.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.candidate.Candidate.prototype.toObject = function(opt_includeInstance) {
  return proto.candidate.Candidate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.candidate.Candidate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.candidate.Candidate.toObject = function(includeInstance, msg) {
  var f, obj = {
    candidateDetail: (f = msg.getCandidateDetail()) && proto.candidate.CandidateDetail.toObject(includeInstance, f),
    textResume: jspb.Message.getFieldWithDefault(msg, 2, ""),
    companyIdsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.candidate.Candidate}
 */
proto.candidate.Candidate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.candidate.Candidate;
  return proto.candidate.Candidate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.candidate.Candidate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.candidate.Candidate}
 */
proto.candidate.Candidate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.candidate.CandidateDetail;
      reader.readMessage(value,proto.candidate.CandidateDetail.deserializeBinaryFromReader);
      msg.setCandidateDetail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextResume(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addCompanyIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.candidate.Candidate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.candidate.Candidate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.candidate.Candidate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.candidate.Candidate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCandidateDetail();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.candidate.CandidateDetail.serializeBinaryToWriter
    );
  }
  f = message.getTextResume();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCompanyIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional CandidateDetail candidate_detail = 1;
 * @return {?proto.candidate.CandidateDetail}
 */
proto.candidate.Candidate.prototype.getCandidateDetail = function() {
  return /** @type{?proto.candidate.CandidateDetail} */ (
    jspb.Message.getWrapperField(this, proto.candidate.CandidateDetail, 1));
};


/**
 * @param {?proto.candidate.CandidateDetail|undefined} value
 * @return {!proto.candidate.Candidate} returns this
*/
proto.candidate.Candidate.prototype.setCandidateDetail = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.candidate.Candidate} returns this
 */
proto.candidate.Candidate.prototype.clearCandidateDetail = function() {
  return this.setCandidateDetail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.candidate.Candidate.prototype.hasCandidateDetail = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string text_resume = 2;
 * @return {string}
 */
proto.candidate.Candidate.prototype.getTextResume = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.candidate.Candidate} returns this
 */
proto.candidate.Candidate.prototype.setTextResume = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string company_ids = 3;
 * @return {!Array<string>}
 */
proto.candidate.Candidate.prototype.getCompanyIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.candidate.Candidate} returns this
 */
proto.candidate.Candidate.prototype.setCompanyIdsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.candidate.Candidate} returns this
 */
proto.candidate.Candidate.prototype.addCompanyIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.candidate.Candidate} returns this
 */
proto.candidate.Candidate.prototype.clearCompanyIdsList = function() {
  return this.setCompanyIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.candidate.CandidateDetail.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.candidate.CandidateDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.candidate.CandidateDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.candidate.CandidateDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.candidate.CandidateDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    userDetail: (f = msg.getUserDetail()) && entities_user_pb.UserDetail.toObject(includeInstance, f),
    experienceList: jspb.Message.toObjectList(msg.getExperienceList(),
    proto.candidate.Experience.toObject, includeInstance),
    educationList: jspb.Message.toObjectList(msg.getEducationList(),
    entities_common_pb.Education.toObject, includeInstance),
    notesList: jspb.Message.toObjectList(msg.getNotesList(),
    proto.candidate.Notes.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.candidate.CandidateDetail}
 */
proto.candidate.CandidateDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.candidate.CandidateDetail;
  return proto.candidate.CandidateDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.candidate.CandidateDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.candidate.CandidateDetail}
 */
proto.candidate.CandidateDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new entities_user_pb.UserDetail;
      reader.readMessage(value,entities_user_pb.UserDetail.deserializeBinaryFromReader);
      msg.setUserDetail(value);
      break;
    case 2:
      var value = new proto.candidate.Experience;
      reader.readMessage(value,proto.candidate.Experience.deserializeBinaryFromReader);
      msg.addExperience(value);
      break;
    case 3:
      var value = new entities_common_pb.Education;
      reader.readMessage(value,entities_common_pb.Education.deserializeBinaryFromReader);
      msg.addEducation(value);
      break;
    case 4:
      var value = new proto.candidate.Notes;
      reader.readMessage(value,proto.candidate.Notes.deserializeBinaryFromReader);
      msg.addNotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.candidate.CandidateDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.candidate.CandidateDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.candidate.CandidateDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.candidate.CandidateDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserDetail();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      entities_user_pb.UserDetail.serializeBinaryToWriter
    );
  }
  f = message.getExperienceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.candidate.Experience.serializeBinaryToWriter
    );
  }
  f = message.getEducationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      entities_common_pb.Education.serializeBinaryToWriter
    );
  }
  f = message.getNotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.candidate.Notes.serializeBinaryToWriter
    );
  }
};


/**
 * optional user.UserDetail user_detail = 1;
 * @return {?proto.user.UserDetail}
 */
proto.candidate.CandidateDetail.prototype.getUserDetail = function() {
  return /** @type{?proto.user.UserDetail} */ (
    jspb.Message.getWrapperField(this, entities_user_pb.UserDetail, 1));
};


/**
 * @param {?proto.user.UserDetail|undefined} value
 * @return {!proto.candidate.CandidateDetail} returns this
*/
proto.candidate.CandidateDetail.prototype.setUserDetail = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.candidate.CandidateDetail} returns this
 */
proto.candidate.CandidateDetail.prototype.clearUserDetail = function() {
  return this.setUserDetail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.candidate.CandidateDetail.prototype.hasUserDetail = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Experience experience = 2;
 * @return {!Array<!proto.candidate.Experience>}
 */
proto.candidate.CandidateDetail.prototype.getExperienceList = function() {
  return /** @type{!Array<!proto.candidate.Experience>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.candidate.Experience, 2));
};


/**
 * @param {!Array<!proto.candidate.Experience>} value
 * @return {!proto.candidate.CandidateDetail} returns this
*/
proto.candidate.CandidateDetail.prototype.setExperienceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.candidate.Experience=} opt_value
 * @param {number=} opt_index
 * @return {!proto.candidate.Experience}
 */
proto.candidate.CandidateDetail.prototype.addExperience = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.candidate.Experience, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.candidate.CandidateDetail} returns this
 */
proto.candidate.CandidateDetail.prototype.clearExperienceList = function() {
  return this.setExperienceList([]);
};


/**
 * repeated common.Education education = 3;
 * @return {!Array<!proto.common.Education>}
 */
proto.candidate.CandidateDetail.prototype.getEducationList = function() {
  return /** @type{!Array<!proto.common.Education>} */ (
    jspb.Message.getRepeatedWrapperField(this, entities_common_pb.Education, 3));
};


/**
 * @param {!Array<!proto.common.Education>} value
 * @return {!proto.candidate.CandidateDetail} returns this
*/
proto.candidate.CandidateDetail.prototype.setEducationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.common.Education=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.Education}
 */
proto.candidate.CandidateDetail.prototype.addEducation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.common.Education, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.candidate.CandidateDetail} returns this
 */
proto.candidate.CandidateDetail.prototype.clearEducationList = function() {
  return this.setEducationList([]);
};


/**
 * repeated Notes notes = 4;
 * @return {!Array<!proto.candidate.Notes>}
 */
proto.candidate.CandidateDetail.prototype.getNotesList = function() {
  return /** @type{!Array<!proto.candidate.Notes>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.candidate.Notes, 4));
};


/**
 * @param {!Array<!proto.candidate.Notes>} value
 * @return {!proto.candidate.CandidateDetail} returns this
*/
proto.candidate.CandidateDetail.prototype.setNotesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.candidate.Notes=} opt_value
 * @param {number=} opt_index
 * @return {!proto.candidate.Notes}
 */
proto.candidate.CandidateDetail.prototype.addNotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.candidate.Notes, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.candidate.CandidateDetail} returns this
 */
proto.candidate.CandidateDetail.prototype.clearNotesList = function() {
  return this.setNotesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.candidate.Notes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.candidate.Notes.prototype.toObject = function(opt_includeInstance) {
  return proto.candidate.Notes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.candidate.Notes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.candidate.Notes.toObject = function(includeInstance, msg) {
  var f, obj = {
    notesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.candidate.Notes}
 */
proto.candidate.Notes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.candidate.Notes;
  return proto.candidate.Notes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.candidate.Notes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.candidate.Notes}
 */
proto.candidate.Notes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addNotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.candidate.Notes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.candidate.Notes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.candidate.Notes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.candidate.Notes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string notes = 1;
 * @return {!Array<string>}
 */
proto.candidate.Notes.prototype.getNotesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.candidate.Notes} returns this
 */
proto.candidate.Notes.prototype.setNotesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.candidate.Notes} returns this
 */
proto.candidate.Notes.prototype.addNotes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.candidate.Notes} returns this
 */
proto.candidate.Notes.prototype.clearNotesList = function() {
  return this.setNotesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.candidate.Experience.prototype.toObject = function(opt_includeInstance) {
  return proto.candidate.Experience.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.candidate.Experience} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.candidate.Experience.toObject = function(includeInstance, msg) {
  var f, obj = {
    startDate: jspb.Message.getFieldWithDefault(msg, 1, ""),
    endDate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    companyName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    designation: jspb.Message.getFieldWithDefault(msg, 4, ""),
    details: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.candidate.Experience}
 */
proto.candidate.Experience.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.candidate.Experience;
  return proto.candidate.Experience.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.candidate.Experience} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.candidate.Experience}
 */
proto.candidate.Experience.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartDate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndDate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompanyName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesignation(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.candidate.Experience.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.candidate.Experience.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.candidate.Experience} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.candidate.Experience.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartDate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEndDate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCompanyName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDesignation();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDetails();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string start_date = 1;
 * @return {string}
 */
proto.candidate.Experience.prototype.getStartDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.candidate.Experience} returns this
 */
proto.candidate.Experience.prototype.setStartDate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string end_date = 2;
 * @return {string}
 */
proto.candidate.Experience.prototype.getEndDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.candidate.Experience} returns this
 */
proto.candidate.Experience.prototype.setEndDate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string company_name = 3;
 * @return {string}
 */
proto.candidate.Experience.prototype.getCompanyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.candidate.Experience} returns this
 */
proto.candidate.Experience.prototype.setCompanyName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string designation = 4;
 * @return {string}
 */
proto.candidate.Experience.prototype.getDesignation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.candidate.Experience} returns this
 */
proto.candidate.Experience.prototype.setDesignation = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string details = 5;
 * @return {string}
 */
proto.candidate.Experience.prototype.getDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.candidate.Experience} returns this
 */
proto.candidate.Experience.prototype.setDetails = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.candidate.CandidateId.prototype.toObject = function(opt_includeInstance) {
  return proto.candidate.CandidateId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.candidate.CandidateId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.candidate.CandidateId.toObject = function(includeInstance, msg) {
  var f, obj = {
    candidateId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.candidate.CandidateId}
 */
proto.candidate.CandidateId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.candidate.CandidateId;
  return proto.candidate.CandidateId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.candidate.CandidateId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.candidate.CandidateId}
 */
proto.candidate.CandidateId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCandidateId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.candidate.CandidateId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.candidate.CandidateId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.candidate.CandidateId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.candidate.CandidateId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCandidateId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string candidate_id = 1;
 * @return {string}
 */
proto.candidate.CandidateId.prototype.getCandidateId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.candidate.CandidateId} returns this
 */
proto.candidate.CandidateId.prototype.setCandidateId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.candidate);
