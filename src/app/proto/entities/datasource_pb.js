// source: entities/datasource.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.datasource.CockroachDBConnection', null, global);
goog.exportSymbol('proto.datasource.Connection', null, global);
goog.exportSymbol('proto.datasource.Connection.TypeCase', null, global);
goog.exportSymbol('proto.datasource.CreateDatasourceRequest', null, global);
goog.exportSymbol('proto.datasource.CreateDatasourceResponse', null, global);
goog.exportSymbol('proto.datasource.DataSourceConnection', null, global);
goog.exportSymbol('proto.datasource.Datasource', null, global);
goog.exportSymbol('proto.datasource.Datasource.Type', null, global);
goog.exportSymbol('proto.datasource.DatasourceId', null, global);
goog.exportSymbol('proto.datasource.FileConnection', null, global);
goog.exportSymbol('proto.datasource.GenericSQLConnection', null, global);
goog.exportSymbol('proto.datasource.GetDatasourceRequest', null, global);
goog.exportSymbol('proto.datasource.GetDatasourceResponse', null, global);
goog.exportSymbol('proto.datasource.SourceType', null, global);
goog.exportSymbol('proto.datasource.SourceType.TypeCase', null, global);
goog.exportSymbol('proto.datasource.SourceTypeAPI', null, global);
goog.exportSymbol('proto.datasource.SourceTypeDB', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datasource.CreateDatasourceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datasource.CreateDatasourceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datasource.CreateDatasourceRequest.displayName = 'proto.datasource.CreateDatasourceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datasource.CreateDatasourceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datasource.CreateDatasourceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datasource.CreateDatasourceResponse.displayName = 'proto.datasource.CreateDatasourceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datasource.GetDatasourceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datasource.GetDatasourceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datasource.GetDatasourceRequest.displayName = 'proto.datasource.GetDatasourceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datasource.GetDatasourceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datasource.GetDatasourceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datasource.GetDatasourceResponse.displayName = 'proto.datasource.GetDatasourceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datasource.DatasourceId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datasource.DatasourceId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datasource.DatasourceId.displayName = 'proto.datasource.DatasourceId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datasource.Datasource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datasource.Datasource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datasource.Datasource.displayName = 'proto.datasource.Datasource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datasource.SourceType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.datasource.SourceType.oneofGroups_);
};
goog.inherits(proto.datasource.SourceType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datasource.SourceType.displayName = 'proto.datasource.SourceType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datasource.SourceTypeDB = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datasource.SourceTypeDB, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datasource.SourceTypeDB.displayName = 'proto.datasource.SourceTypeDB';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datasource.SourceTypeAPI = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datasource.SourceTypeAPI, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datasource.SourceTypeAPI.displayName = 'proto.datasource.SourceTypeAPI';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datasource.DataSourceConnection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datasource.DataSourceConnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datasource.DataSourceConnection.displayName = 'proto.datasource.DataSourceConnection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datasource.Connection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.datasource.Connection.oneofGroups_);
};
goog.inherits(proto.datasource.Connection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datasource.Connection.displayName = 'proto.datasource.Connection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datasource.FileConnection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datasource.FileConnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datasource.FileConnection.displayName = 'proto.datasource.FileConnection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datasource.CockroachDBConnection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datasource.CockroachDBConnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datasource.CockroachDBConnection.displayName = 'proto.datasource.CockroachDBConnection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.datasource.GenericSQLConnection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.datasource.GenericSQLConnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.datasource.GenericSQLConnection.displayName = 'proto.datasource.GenericSQLConnection';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datasource.CreateDatasourceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.datasource.CreateDatasourceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datasource.CreateDatasourceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.CreateDatasourceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    companyId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dataSource: (f = msg.getDataSource()) && proto.datasource.Datasource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datasource.CreateDatasourceRequest}
 */
proto.datasource.CreateDatasourceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datasource.CreateDatasourceRequest;
  return proto.datasource.CreateDatasourceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datasource.CreateDatasourceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datasource.CreateDatasourceRequest}
 */
proto.datasource.CreateDatasourceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompanyId(value);
      break;
    case 2:
      var value = new proto.datasource.Datasource;
      reader.readMessage(value,proto.datasource.Datasource.deserializeBinaryFromReader);
      msg.setDataSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datasource.CreateDatasourceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datasource.CreateDatasourceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datasource.CreateDatasourceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.CreateDatasourceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompanyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDataSource();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.datasource.Datasource.serializeBinaryToWriter
    );
  }
};


/**
 * optional string company_id = 1;
 * @return {string}
 */
proto.datasource.CreateDatasourceRequest.prototype.getCompanyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.datasource.CreateDatasourceRequest} returns this
 */
proto.datasource.CreateDatasourceRequest.prototype.setCompanyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Datasource data_source = 2;
 * @return {?proto.datasource.Datasource}
 */
proto.datasource.CreateDatasourceRequest.prototype.getDataSource = function() {
  return /** @type{?proto.datasource.Datasource} */ (
    jspb.Message.getWrapperField(this, proto.datasource.Datasource, 2));
};


/**
 * @param {?proto.datasource.Datasource|undefined} value
 * @return {!proto.datasource.CreateDatasourceRequest} returns this
*/
proto.datasource.CreateDatasourceRequest.prototype.setDataSource = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datasource.CreateDatasourceRequest} returns this
 */
proto.datasource.CreateDatasourceRequest.prototype.clearDataSource = function() {
  return this.setDataSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datasource.CreateDatasourceRequest.prototype.hasDataSource = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datasource.CreateDatasourceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.datasource.CreateDatasourceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datasource.CreateDatasourceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.CreateDatasourceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    datasourceId: (f = msg.getDatasourceId()) && proto.datasource.DatasourceId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datasource.CreateDatasourceResponse}
 */
proto.datasource.CreateDatasourceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datasource.CreateDatasourceResponse;
  return proto.datasource.CreateDatasourceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datasource.CreateDatasourceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datasource.CreateDatasourceResponse}
 */
proto.datasource.CreateDatasourceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datasource.DatasourceId;
      reader.readMessage(value,proto.datasource.DatasourceId.deserializeBinaryFromReader);
      msg.setDatasourceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datasource.CreateDatasourceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datasource.CreateDatasourceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datasource.CreateDatasourceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.CreateDatasourceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatasourceId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datasource.DatasourceId.serializeBinaryToWriter
    );
  }
};


/**
 * optional DatasourceId datasource_id = 1;
 * @return {?proto.datasource.DatasourceId}
 */
proto.datasource.CreateDatasourceResponse.prototype.getDatasourceId = function() {
  return /** @type{?proto.datasource.DatasourceId} */ (
    jspb.Message.getWrapperField(this, proto.datasource.DatasourceId, 1));
};


/**
 * @param {?proto.datasource.DatasourceId|undefined} value
 * @return {!proto.datasource.CreateDatasourceResponse} returns this
*/
proto.datasource.CreateDatasourceResponse.prototype.setDatasourceId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datasource.CreateDatasourceResponse} returns this
 */
proto.datasource.CreateDatasourceResponse.prototype.clearDatasourceId = function() {
  return this.setDatasourceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datasource.CreateDatasourceResponse.prototype.hasDatasourceId = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datasource.GetDatasourceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.datasource.GetDatasourceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datasource.GetDatasourceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.GetDatasourceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    datasourceId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datasource.GetDatasourceRequest}
 */
proto.datasource.GetDatasourceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datasource.GetDatasourceRequest;
  return proto.datasource.GetDatasourceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datasource.GetDatasourceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datasource.GetDatasourceRequest}
 */
proto.datasource.GetDatasourceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatasourceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datasource.GetDatasourceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datasource.GetDatasourceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datasource.GetDatasourceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.GetDatasourceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatasourceId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string datasource_id = 1;
 * @return {string}
 */
proto.datasource.GetDatasourceRequest.prototype.getDatasourceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.datasource.GetDatasourceRequest} returns this
 */
proto.datasource.GetDatasourceRequest.prototype.setDatasourceId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datasource.GetDatasourceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.datasource.GetDatasourceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datasource.GetDatasourceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.GetDatasourceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    datasource: (f = msg.getDatasource()) && proto.datasource.Datasource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datasource.GetDatasourceResponse}
 */
proto.datasource.GetDatasourceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datasource.GetDatasourceResponse;
  return proto.datasource.GetDatasourceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datasource.GetDatasourceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datasource.GetDatasourceResponse}
 */
proto.datasource.GetDatasourceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datasource.Datasource;
      reader.readMessage(value,proto.datasource.Datasource.deserializeBinaryFromReader);
      msg.setDatasource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datasource.GetDatasourceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datasource.GetDatasourceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datasource.GetDatasourceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.GetDatasourceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatasource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datasource.Datasource.serializeBinaryToWriter
    );
  }
};


/**
 * optional Datasource datasource = 1;
 * @return {?proto.datasource.Datasource}
 */
proto.datasource.GetDatasourceResponse.prototype.getDatasource = function() {
  return /** @type{?proto.datasource.Datasource} */ (
    jspb.Message.getWrapperField(this, proto.datasource.Datasource, 1));
};


/**
 * @param {?proto.datasource.Datasource|undefined} value
 * @return {!proto.datasource.GetDatasourceResponse} returns this
*/
proto.datasource.GetDatasourceResponse.prototype.setDatasource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datasource.GetDatasourceResponse} returns this
 */
proto.datasource.GetDatasourceResponse.prototype.clearDatasource = function() {
  return this.setDatasource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datasource.GetDatasourceResponse.prototype.hasDatasource = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datasource.DatasourceId.prototype.toObject = function(opt_includeInstance) {
  return proto.datasource.DatasourceId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datasource.DatasourceId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.DatasourceId.toObject = function(includeInstance, msg) {
  var f, obj = {
    datasourceId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datasource.DatasourceId}
 */
proto.datasource.DatasourceId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datasource.DatasourceId;
  return proto.datasource.DatasourceId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datasource.DatasourceId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datasource.DatasourceId}
 */
proto.datasource.DatasourceId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatasourceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datasource.DatasourceId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datasource.DatasourceId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datasource.DatasourceId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.DatasourceId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatasourceId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string datasource_id = 1;
 * @return {string}
 */
proto.datasource.DatasourceId.prototype.getDatasourceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.datasource.DatasourceId} returns this
 */
proto.datasource.DatasourceId.prototype.setDatasourceId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datasource.Datasource.prototype.toObject = function(opt_includeInstance) {
  return proto.datasource.Datasource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datasource.Datasource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.Datasource.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sourceType: (f = msg.getSourceType()) && proto.datasource.SourceType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datasource.Datasource}
 */
proto.datasource.Datasource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datasource.Datasource;
  return proto.datasource.Datasource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datasource.Datasource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datasource.Datasource}
 */
proto.datasource.Datasource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.datasource.Datasource.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.datasource.SourceType;
      reader.readMessage(value,proto.datasource.SourceType.deserializeBinaryFromReader);
      msg.setSourceType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datasource.Datasource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datasource.Datasource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datasource.Datasource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.Datasource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSourceType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.datasource.SourceType.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.datasource.Datasource.Type = {
  UNKNOWN: 0,
  CANDIDATE: 1,
  JOB: 2
};

/**
 * optional Type type = 1;
 * @return {!proto.datasource.Datasource.Type}
 */
proto.datasource.Datasource.prototype.getType = function() {
  return /** @type {!proto.datasource.Datasource.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.datasource.Datasource.Type} value
 * @return {!proto.datasource.Datasource} returns this
 */
proto.datasource.Datasource.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional SourceType source_type = 2;
 * @return {?proto.datasource.SourceType}
 */
proto.datasource.Datasource.prototype.getSourceType = function() {
  return /** @type{?proto.datasource.SourceType} */ (
    jspb.Message.getWrapperField(this, proto.datasource.SourceType, 2));
};


/**
 * @param {?proto.datasource.SourceType|undefined} value
 * @return {!proto.datasource.Datasource} returns this
*/
proto.datasource.Datasource.prototype.setSourceType = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datasource.Datasource} returns this
 */
proto.datasource.Datasource.prototype.clearSourceType = function() {
  return this.setSourceType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datasource.Datasource.prototype.hasSourceType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.datasource.SourceType.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.datasource.SourceType.TypeCase = {
  TYPE_NOT_SET: 0,
  DB: 1,
  API: 2
};

/**
 * @return {proto.datasource.SourceType.TypeCase}
 */
proto.datasource.SourceType.prototype.getTypeCase = function() {
  return /** @type {proto.datasource.SourceType.TypeCase} */(jspb.Message.computeOneofCase(this, proto.datasource.SourceType.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datasource.SourceType.prototype.toObject = function(opt_includeInstance) {
  return proto.datasource.SourceType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datasource.SourceType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.SourceType.toObject = function(includeInstance, msg) {
  var f, obj = {
    db: (f = msg.getDb()) && proto.datasource.SourceTypeDB.toObject(includeInstance, f),
    api: (f = msg.getApi()) && proto.datasource.SourceTypeAPI.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datasource.SourceType}
 */
proto.datasource.SourceType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datasource.SourceType;
  return proto.datasource.SourceType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datasource.SourceType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datasource.SourceType}
 */
proto.datasource.SourceType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datasource.SourceTypeDB;
      reader.readMessage(value,proto.datasource.SourceTypeDB.deserializeBinaryFromReader);
      msg.setDb(value);
      break;
    case 2:
      var value = new proto.datasource.SourceTypeAPI;
      reader.readMessage(value,proto.datasource.SourceTypeAPI.deserializeBinaryFromReader);
      msg.setApi(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datasource.SourceType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datasource.SourceType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datasource.SourceType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.SourceType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDb();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datasource.SourceTypeDB.serializeBinaryToWriter
    );
  }
  f = message.getApi();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.datasource.SourceTypeAPI.serializeBinaryToWriter
    );
  }
};


/**
 * optional SourceTypeDB db = 1;
 * @return {?proto.datasource.SourceTypeDB}
 */
proto.datasource.SourceType.prototype.getDb = function() {
  return /** @type{?proto.datasource.SourceTypeDB} */ (
    jspb.Message.getWrapperField(this, proto.datasource.SourceTypeDB, 1));
};


/**
 * @param {?proto.datasource.SourceTypeDB|undefined} value
 * @return {!proto.datasource.SourceType} returns this
*/
proto.datasource.SourceType.prototype.setDb = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.datasource.SourceType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datasource.SourceType} returns this
 */
proto.datasource.SourceType.prototype.clearDb = function() {
  return this.setDb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datasource.SourceType.prototype.hasDb = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SourceTypeAPI api = 2;
 * @return {?proto.datasource.SourceTypeAPI}
 */
proto.datasource.SourceType.prototype.getApi = function() {
  return /** @type{?proto.datasource.SourceTypeAPI} */ (
    jspb.Message.getWrapperField(this, proto.datasource.SourceTypeAPI, 2));
};


/**
 * @param {?proto.datasource.SourceTypeAPI|undefined} value
 * @return {!proto.datasource.SourceType} returns this
*/
proto.datasource.SourceType.prototype.setApi = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.datasource.SourceType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datasource.SourceType} returns this
 */
proto.datasource.SourceType.prototype.clearApi = function() {
  return this.setApi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datasource.SourceType.prototype.hasApi = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datasource.SourceTypeDB.prototype.toObject = function(opt_includeInstance) {
  return proto.datasource.SourceTypeDB.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datasource.SourceTypeDB} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.SourceTypeDB.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataSourceConnection: (f = msg.getDataSourceConnection()) && proto.datasource.DataSourceConnection.toObject(includeInstance, f),
    queryString: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datasource.SourceTypeDB}
 */
proto.datasource.SourceTypeDB.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datasource.SourceTypeDB;
  return proto.datasource.SourceTypeDB.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datasource.SourceTypeDB} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datasource.SourceTypeDB}
 */
proto.datasource.SourceTypeDB.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datasource.DataSourceConnection;
      reader.readMessage(value,proto.datasource.DataSourceConnection.deserializeBinaryFromReader);
      msg.setDataSourceConnection(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueryString(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datasource.SourceTypeDB.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datasource.SourceTypeDB.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datasource.SourceTypeDB} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.SourceTypeDB.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataSourceConnection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datasource.DataSourceConnection.serializeBinaryToWriter
    );
  }
  f = message.getQueryString();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional DataSourceConnection data_source_connection = 1;
 * @return {?proto.datasource.DataSourceConnection}
 */
proto.datasource.SourceTypeDB.prototype.getDataSourceConnection = function() {
  return /** @type{?proto.datasource.DataSourceConnection} */ (
    jspb.Message.getWrapperField(this, proto.datasource.DataSourceConnection, 1));
};


/**
 * @param {?proto.datasource.DataSourceConnection|undefined} value
 * @return {!proto.datasource.SourceTypeDB} returns this
*/
proto.datasource.SourceTypeDB.prototype.setDataSourceConnection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datasource.SourceTypeDB} returns this
 */
proto.datasource.SourceTypeDB.prototype.clearDataSourceConnection = function() {
  return this.setDataSourceConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datasource.SourceTypeDB.prototype.hasDataSourceConnection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string query_string = 2;
 * @return {string}
 */
proto.datasource.SourceTypeDB.prototype.getQueryString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.datasource.SourceTypeDB} returns this
 */
proto.datasource.SourceTypeDB.prototype.setQueryString = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datasource.SourceTypeAPI.prototype.toObject = function(opt_includeInstance) {
  return proto.datasource.SourceTypeAPI.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datasource.SourceTypeAPI} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.SourceTypeAPI.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datasource.SourceTypeAPI}
 */
proto.datasource.SourceTypeAPI.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datasource.SourceTypeAPI;
  return proto.datasource.SourceTypeAPI.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datasource.SourceTypeAPI} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datasource.SourceTypeAPI}
 */
proto.datasource.SourceTypeAPI.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datasource.SourceTypeAPI.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datasource.SourceTypeAPI.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datasource.SourceTypeAPI} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.SourceTypeAPI.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datasource.DataSourceConnection.prototype.toObject = function(opt_includeInstance) {
  return proto.datasource.DataSourceConnection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datasource.DataSourceConnection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.DataSourceConnection.toObject = function(includeInstance, msg) {
  var f, obj = {
    connection: (f = msg.getConnection()) && proto.datasource.Connection.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datasource.DataSourceConnection}
 */
proto.datasource.DataSourceConnection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datasource.DataSourceConnection;
  return proto.datasource.DataSourceConnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datasource.DataSourceConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datasource.DataSourceConnection}
 */
proto.datasource.DataSourceConnection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datasource.Connection;
      reader.readMessage(value,proto.datasource.Connection.deserializeBinaryFromReader);
      msg.setConnection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datasource.DataSourceConnection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datasource.DataSourceConnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datasource.DataSourceConnection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.DataSourceConnection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datasource.Connection.serializeBinaryToWriter
    );
  }
};


/**
 * optional Connection connection = 1;
 * @return {?proto.datasource.Connection}
 */
proto.datasource.DataSourceConnection.prototype.getConnection = function() {
  return /** @type{?proto.datasource.Connection} */ (
    jspb.Message.getWrapperField(this, proto.datasource.Connection, 1));
};


/**
 * @param {?proto.datasource.Connection|undefined} value
 * @return {!proto.datasource.DataSourceConnection} returns this
*/
proto.datasource.DataSourceConnection.prototype.setConnection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datasource.DataSourceConnection} returns this
 */
proto.datasource.DataSourceConnection.prototype.clearConnection = function() {
  return this.setConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datasource.DataSourceConnection.prototype.hasConnection = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.datasource.Connection.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.datasource.Connection.TypeCase = {
  TYPE_NOT_SET: 0,
  FILE_CONNECTION: 1,
  COCKROACH_DB_CONNECTION: 2,
  GENERIC_SQL_CONNECTION: 3
};

/**
 * @return {proto.datasource.Connection.TypeCase}
 */
proto.datasource.Connection.prototype.getTypeCase = function() {
  return /** @type {proto.datasource.Connection.TypeCase} */(jspb.Message.computeOneofCase(this, proto.datasource.Connection.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datasource.Connection.prototype.toObject = function(opt_includeInstance) {
  return proto.datasource.Connection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datasource.Connection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.Connection.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileConnection: (f = msg.getFileConnection()) && proto.datasource.FileConnection.toObject(includeInstance, f),
    cockroachDbConnection: (f = msg.getCockroachDbConnection()) && proto.datasource.CockroachDBConnection.toObject(includeInstance, f),
    genericSqlConnection: (f = msg.getGenericSqlConnection()) && proto.datasource.GenericSQLConnection.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datasource.Connection}
 */
proto.datasource.Connection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datasource.Connection;
  return proto.datasource.Connection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datasource.Connection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datasource.Connection}
 */
proto.datasource.Connection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.datasource.FileConnection;
      reader.readMessage(value,proto.datasource.FileConnection.deserializeBinaryFromReader);
      msg.setFileConnection(value);
      break;
    case 2:
      var value = new proto.datasource.CockroachDBConnection;
      reader.readMessage(value,proto.datasource.CockroachDBConnection.deserializeBinaryFromReader);
      msg.setCockroachDbConnection(value);
      break;
    case 3:
      var value = new proto.datasource.GenericSQLConnection;
      reader.readMessage(value,proto.datasource.GenericSQLConnection.deserializeBinaryFromReader);
      msg.setGenericSqlConnection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datasource.Connection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datasource.Connection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datasource.Connection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.Connection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFileConnection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.datasource.FileConnection.serializeBinaryToWriter
    );
  }
  f = message.getCockroachDbConnection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.datasource.CockroachDBConnection.serializeBinaryToWriter
    );
  }
  f = message.getGenericSqlConnection();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.datasource.GenericSQLConnection.serializeBinaryToWriter
    );
  }
};


/**
 * optional FileConnection file_connection = 1;
 * @return {?proto.datasource.FileConnection}
 */
proto.datasource.Connection.prototype.getFileConnection = function() {
  return /** @type{?proto.datasource.FileConnection} */ (
    jspb.Message.getWrapperField(this, proto.datasource.FileConnection, 1));
};


/**
 * @param {?proto.datasource.FileConnection|undefined} value
 * @return {!proto.datasource.Connection} returns this
*/
proto.datasource.Connection.prototype.setFileConnection = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.datasource.Connection.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datasource.Connection} returns this
 */
proto.datasource.Connection.prototype.clearFileConnection = function() {
  return this.setFileConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datasource.Connection.prototype.hasFileConnection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CockroachDBConnection cockroach_db_connection = 2;
 * @return {?proto.datasource.CockroachDBConnection}
 */
proto.datasource.Connection.prototype.getCockroachDbConnection = function() {
  return /** @type{?proto.datasource.CockroachDBConnection} */ (
    jspb.Message.getWrapperField(this, proto.datasource.CockroachDBConnection, 2));
};


/**
 * @param {?proto.datasource.CockroachDBConnection|undefined} value
 * @return {!proto.datasource.Connection} returns this
*/
proto.datasource.Connection.prototype.setCockroachDbConnection = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.datasource.Connection.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datasource.Connection} returns this
 */
proto.datasource.Connection.prototype.clearCockroachDbConnection = function() {
  return this.setCockroachDbConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datasource.Connection.prototype.hasCockroachDbConnection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GenericSQLConnection generic_sql_connection = 3;
 * @return {?proto.datasource.GenericSQLConnection}
 */
proto.datasource.Connection.prototype.getGenericSqlConnection = function() {
  return /** @type{?proto.datasource.GenericSQLConnection} */ (
    jspb.Message.getWrapperField(this, proto.datasource.GenericSQLConnection, 3));
};


/**
 * @param {?proto.datasource.GenericSQLConnection|undefined} value
 * @return {!proto.datasource.Connection} returns this
*/
proto.datasource.Connection.prototype.setGenericSqlConnection = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.datasource.Connection.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.datasource.Connection} returns this
 */
proto.datasource.Connection.prototype.clearGenericSqlConnection = function() {
  return this.setGenericSqlConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.datasource.Connection.prototype.hasGenericSqlConnection = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datasource.FileConnection.prototype.toObject = function(opt_includeInstance) {
  return proto.datasource.FileConnection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datasource.FileConnection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.FileConnection.toObject = function(includeInstance, msg) {
  var f, obj = {
    uri: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datasource.FileConnection}
 */
proto.datasource.FileConnection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datasource.FileConnection;
  return proto.datasource.FileConnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datasource.FileConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datasource.FileConnection}
 */
proto.datasource.FileConnection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datasource.FileConnection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datasource.FileConnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datasource.FileConnection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.FileConnection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uri = 1;
 * @return {string}
 */
proto.datasource.FileConnection.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.datasource.FileConnection} returns this
 */
proto.datasource.FileConnection.prototype.setUri = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datasource.CockroachDBConnection.prototype.toObject = function(opt_includeInstance) {
  return proto.datasource.CockroachDBConnection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datasource.CockroachDBConnection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.CockroachDBConnection.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datasource.CockroachDBConnection}
 */
proto.datasource.CockroachDBConnection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datasource.CockroachDBConnection;
  return proto.datasource.CockroachDBConnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datasource.CockroachDBConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datasource.CockroachDBConnection}
 */
proto.datasource.CockroachDBConnection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datasource.CockroachDBConnection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datasource.CockroachDBConnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datasource.CockroachDBConnection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.CockroachDBConnection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.datasource.GenericSQLConnection.prototype.toObject = function(opt_includeInstance) {
  return proto.datasource.GenericSQLConnection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.datasource.GenericSQLConnection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.GenericSQLConnection.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.datasource.GenericSQLConnection}
 */
proto.datasource.GenericSQLConnection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.datasource.GenericSQLConnection;
  return proto.datasource.GenericSQLConnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.datasource.GenericSQLConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.datasource.GenericSQLConnection}
 */
proto.datasource.GenericSQLConnection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.datasource.GenericSQLConnection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.datasource.GenericSQLConnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.datasource.GenericSQLConnection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.datasource.GenericSQLConnection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.datasource);
